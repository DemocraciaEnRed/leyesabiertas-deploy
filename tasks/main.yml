---
- include_tasks: Debian.yml
  when: docker_install and ansible_distribution == 'Debian'
  tags:
    - fresh_install

- include_tasks: RedHat.yml
  when: docker_install and ansible_os_family == 'RedHat'
  tags:
    - fresh_install

- include_tasks: Ubuntu.yml
  when: docker_install and ansible_distribution == 'Ubuntu'
  tags:
    - fresh_install

# Official docs for Docker Compose https://docs.docker.com/compose/install/
# Here we check for docker-compose binary in root user PATH (become: true)
- name: Check if we already have Docker Compose
  shell: which docker-compose
  register: which_docker_compose
  ignore_errors: true
  tags:
    - fresh_install
  become: true

- block:
  - name: "[Debian/Ubuntu] Install Docker Compose"
    get_url:
      url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64"
      dest: /usr/local/bin/docker-compose
      mode: 0755
    when: ansible_os_family != 'RedHat'

  - name: "[RHEL] Install Docker Compose"
    get_url:
      url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64"
      dest: /usr/bin/docker-compose
      mode: 0755
    when: ansible_os_family == 'RedHat'

  when: which_docker_compose.rc != 0
  tags:
    - fresh_install
  become: true

- name: Create installation directory
  file:
    path: "{{ install_dir_path }}"
    state: directory
    mode: 0755
  tags:
    - fresh_install
  become: true

- name: Create docker volumes directory
  file:
    path: "{{ docker_volumes_dir_path }}"
    state: directory
    mode: 0755
  tags:
    - fresh_install
  become: true

- name: Create MGOB config directory
  file:
    path: "{{ mongodb_backup_config_dir_path }}"
    state: directory
    mode: 0755
  when: enable_mgob
  tags:
    - fresh_install
  become: true

- name: Create traefik config directory
  file:
    path: "{{ traefik_config_dir_path }}"
    state: directory
    mode: 0755
  tags:
    - fresh_install
  become: true

- name: Copy traefik.toml
  template:
    src: traefik.toml.j2
    dest: "{{ traefik_config_dir_path }}/traefik.toml"
    mode: 0644
  tags:
    - fresh_install
  become: true

- name: Touch acme.json
  file:
    path: "{{ traefik_config_dir_path }}/acme.json"
    state: touch
    mode: 0600
  when: enable_lets_encrypt
  tags:
    - fresh_install
  become: true

- name: Copy https certificate
  copy:
    src: "{{ https_certificate_path }}"
    dest: "{{ traefik_config_dir_path }}/cert.crt"
    mode: 0600
  tags:
    - fresh_install
  when: enable_own_certificate and https_certificate_path is defined
  become: true

- name: Copy https key
  copy:
    src: "{{ https_key_path }}"
    dest: "{{ traefik_config_dir_path }}/key.key"
    mode: 0600
  when: enable_own_certificate and https_key_path is defined
  tags:
    - fresh_install
  become: true

# We only check if installation directory exists
- name: Check if role was previously run with fresh_install tag
  stat:
    path: "{{ install_dir_path }}"
  register: change_version_check
  tags:
    - change_version

- name: Crash if there wasn't a fresh install
  fail:
    msg: "[ERROR] You must run this role with tag 'fresh_install' before using 'change_version' tag."
  when: change_version_check.stat.isdir is not defined
  tags:
    - change_version

- name: Copy docker-compose
  template:
    src: docker-compose.yml.j2
    dest: "{{ install_dir_path }}/docker-compose.yml"
    backup: true
  tags:
    - fresh_install
    - change_version
  become: true

- name: Copy MGOB config
  template:
    src: democracyos.yml.j2
    dest: "{{ mongodb_backup_config_dir_path }}/democracyos.yml"
  when: enable_mgob
  tags:
    - fresh_install
  become: true

- name: Pull new containers
  shell: "docker-compose -f {{ install_dir_path }}/docker-compose.yml pull"
  register: new_version_pull
  tags:
    - change_version
    - fresh_install
  become: true

- name: Crash if docker pull failed
  fail:
    msg: "[ERROR] Pulling new containers failed."
  when: new_version_pull.rc != 0
  tags:
    - change_version

# Ansible has docker_service module but it only works by
# installing docker-compose with pip. This may not always
# be desired. We are following official Docker docs.
- name: Docker Compose up
  shell: "docker-compose -f {{ install_dir_path }}/docker-compose.yml up -d"
  tags:
    - fresh_install
    - change_version
  register: compose_up
  become: true

- name: Crash if container change went wrong
  fail:
    msg: "[ERROR] Changing container version failed."
  when: compose_up != 0
  tags:
    - change_version

- name: Clean up after container change
  shell: "docker container prune"
  tags:
    - change_version
  when: compose_up == 0
  become: true