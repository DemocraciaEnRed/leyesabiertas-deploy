version: '2'

services:
  app:
    image: {{ democracyos_image }}
{% if democracyos_memory_limit is defined %}
    command: node --max_old_space_size={{ democracyos_memory_limit }} index.js
{% endif %}
    environment:
      PORT: 3000
      MONGO_URL: 'mongodb://mongo/{{ databaseName }}'
{% if DEFAULT_SSL_CERT is defined %}
      DEFAULT_SSL_CERT: {{DEFAULT_SSL_CERT}}
{% endif %}
{% for key, value in democracyos.iteritems() if democracyos is defined %}
      {{ key }}: '{{ value }}'
{% endfor %}
    links:
      - mongo
    tty: true
    networks:
      - front-tier
      - back-tier
    ports:
      - 25:25
    restart: always

  mongo:
    image: mongo:3.0
    networks:
      - front-tier
      - back-tier
    volumes:
      - /usr/src/mongodb:/data/db
    ports:
      - 27017:27017

  lb:
    image: dockercloud/haproxy:1.5.3
{% if DEFAULT_SSL_CERT is defined %}
    environment:
      - EXTRA_FRONTEND_SETTINGS_443=http-response set-header Strict-Transport-Security max-age=31536000
      - EXTRA_GLOBAL_SETTINGS=tune.ssl.default-dh-param 2048
      - SSL_BIND_CIPHERS=ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA
      - SSL_BIND_OPTIONS=no-sslv3
      - FORCE_SSL=yes
{% endif %}
    ports:
      - 80:80
{% if DEFAULT_SSL_CERT is defined %}
      - 443:443
{% endif %}
    links:
      - app
    networks:
      - front-tier
      - back-tier
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

{% if DATADOG_API_KEY is defined and DATADOG_HOSTNAME is defined %}
  dd-agent:
    image: datadog/docker-dd-agent:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
    environment:
      - API_KEY={{DATADOG_API_KEY}}
      - DD_HOSTNAME={{DATADOG_HOSTNAME}}
    networks:
      - front-tier
      - back-tier
{% endif %}

networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge
